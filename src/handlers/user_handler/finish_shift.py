from datetime import datetime, timezone, timedelta

from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove, InputMediaPhoto, InputMediaVideo, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.filters import StateFilter, Command
from aiogram.exceptions import TelegramAPIError
from src.db.queries.dao.dao import AsyncOrm

from src.callbacks.place import PlaceCallbackFactory
from src.fsm.fsm import FSMFinishShift
from src.lexicon.lexicon_ru import LEXICON_RU
from src.keyboards.keyboard import create_cancel_kb, create_yes_no_kb, create_places_kb
from src.middlewares.album_middleware import AlbumsMiddleware
from src.config import settings
from src.db import cached_places

from decimal import Decimal
from typing import Dict, Any, Union
import re
import logging

router_finish = Router()
router_finish.message.middleware(middleware=AlbumsMiddleware(2))
logger = logging.getLogger(__name__)


async def report(dictionary: Dict[str, Any], date: str, user_id: Union[str, int]) -> str:
    return "üìù–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã:\n\n"\
           f"–î–∞—Ç–∞: {date}\n" \
           f"–¢–æ—á–∫–∞: {dictionary['place']}\n" \
           f"–ò–º—è: {await AsyncOrm.get_current_name(user_id=user_id)}\n\n" \
           f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π: <em>{dictionary['visitors']}</em>\n" \
           f"–ë—ã–ª–∏ –ª–∏ –ª—å–≥–æ—Ç–Ω–∏–∫–∏: <em>{'yes' if dictionary['beneficiaries'] != 'no' else 'no'}</em>\n" \
           f"–ü–∞—Ä–æ–≤–æ–∑ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –∑–∞—Ä—è–¥–∫—É: <em>{dictionary['charge']}</em>\n" \
           f"–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: <em>{dictionary['summary']}</em>\n" \
           f"–ù–∞–ª–∏—á–Ω—ã–µ: <em>{dictionary['cash']}</em>\n" \
           f"–ë–µ–∑–Ω–∞–ª: <em>{dictionary['online_cash']}</em>\n" \
           f"QR-–∫–æ–¥: <em>{dictionary['qr_code']}</em>\n" \
           f"–†–∞—Å—Ö–æ–¥: <em>{dictionary['expenditure']}</em>\n" \
           f"–ó–∞—Ä–ø–ª–∞—Ç–∞: <em>{dictionary['salary']}</em>\n" \
           f"–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è: <em>{dictionary['encashment']}</em>\n"


async def send_report(message: Message, state: FSMContext, data: dict, date: str, chat_id: Union[str, int]):
    try:
        await message.bot.send_message(
            chat_id=chat_id,
            text=await report(
                dictionary=data,
                date=date,
                user_id=message.chat.id,
            ),
            parse_mode="html",
        )

        if 'photo_of_beneficiaries' in data:
            media_beneficiaries = [
                InputMediaPhoto(
                    media=photo_file_id,
                    caption="–§–æ—Ç–æ –ª—å–≥–æ—Ç–Ω–∏–∫–æ–≤" if i == 0 else ""
                ) for i, photo_file_id in enumerate(data['photo_of_beneficiaries'])
            ]

            await message.bot.send_media_group(
                chat_id=chat_id,
                media=media_beneficiaries,
            )

        media_necessary = [
            InputMediaPhoto(
                media=photo_file_id,
                caption="–ß–µ–∫–∏ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–æ—Ç–æ –∑–∞ —Å–º–µ–Ω—É" if i == 0 else ""
            ) for i, photo_file_id in enumerate(data['necessary_photos'])
        ]

        await message.bot.send_media_group(
            chat_id=chat_id,
            media=media_necessary,
        )

        video_necessary = [
            InputMediaVideo(
                media=video_file_id,
                caption="–í–∏–¥–µ–æ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞ –∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –ø–æ–µ–∑–¥–∞" if i == 0 else ""
            ) for i, video_file_id in enumerate(data['charge_video'])
        ]

        await message.bot.send_media_group(
            chat_id=chat_id,
            media=video_necessary,
        )

        await AsyncOrm.set_data_to_reports(
            user_id=message.chat.id,
            place=data["place"],
            visitors=data["visitors"],
            revenue=int(data["summary"].replace('.', '').replace(',', '')),
        )

        await message.answer(
            text="–û—Ç–ª–∏—á–Ω–æ! –§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á—ë—Ç...\n–û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞—á–∞–ª—å—Å—Ç–≤—É!",
            reply_markup=ReplyKeyboardRemove(),
        )
        await message.answer(
            text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        )
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –Ω–µ —Å —Ç–µ–ª–µ–≥—Ä–∞–º –≤ finish_shift.py")
        await message.bot.send_message(
            text=f"Finish shift report error: {e}\n"
                 f"User_id: {message.from_user.id}",
            chat_id=settings.ADMIN_ID,
            reply_markup=ReplyKeyboardRemove(),
        )
        await message.answer(
            text="–£–ø—Å... —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Å–æ–æ–±—â–∏—Ç–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É!",
            reply_markup=ReplyKeyboardRemove(),
        )
    except TelegramAPIError as e:
        logger.exception("–û—à–∏–±–∫–∞ —Å —Ç–µ–ª–µ–≥—Ä–∞–º –≤ finish_shift.py")
        await message.bot.send_message(
            text=f"Finish shift report error: {e}\n"
                 f"User_id: {message.from_user.id}",
            chat_id=settings.ADMIN_ID,
            reply_markup=ReplyKeyboardRemove(),
        )
        await message.answer(
            text="–£–ø—Å... —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Å–æ–æ–±—â–∏—Ç–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É!",
            reply_markup=ReplyKeyboardRemove(),
        )
    finally:
        await state.clear()


@router_finish.message(Command(commands="finish_shift"), StateFilter(default_state))
async def process_place_command(message: Message, state: FSMContext):
    await message.answer(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–∞–±–æ—á—É—é —Ç–æ—á–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ <b>–Ω–∏–∂–µ</b>",
        reply_markup=create_places_kb(),
        parse_mode="html",
    )
    await state.set_state(FSMFinishShift.place)


@router_finish.callback_query(StateFilter(FSMFinishShift.place), PlaceCallbackFactory.filter())
async def process_finish_start_command(callback: CallbackQuery, callback_data: PlaceCallbackFactory, state: FSMContext):
    await state.update_data(place=callback_data.title)
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–∞–±–æ—á—É—é —Ç–æ—á–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ <b>–Ω–∏–∂–µ</b>\n\n"
             f"‚û¢ {callback_data.title}",
        parse_mode="html",
    )
    await callback.message.answer(
        text="–°–∫–æ–ª—å–∫–æ –±—ã–ª–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è? (–ü—Ä–∏—à–ª–∏—Ç–µ –æ—Ç–≤–µ—Ç —á–∏—Å–ª–æ–º)",
        reply_markup=create_cancel_kb(),
    )
    await callback.answer()
    await state.set_state(FSMFinishShift.count_of_visitors)


@router_finish.message(StateFilter(FSMFinishShift.place))
async def warning_place_command(message: Message):
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—á—É—é —Ç–æ—á–∫—É –Ω–∏–∂–µ –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞",
        reply_markup=create_cancel_kb(),
    )


@router_finish.message(StateFilter(FSMFinishShift.count_of_visitors), F.text.isdigit())
async def process_visitors_command(message: Message, state: FSMContext):
    await state.update_data(visitors=int(message.text))
    await message.answer(
        text="–ë—ã–ª–∏ –ª–∏ –ª—å–≥–æ—Ç–Ω–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è?",
        reply_markup=create_yes_no_kb(),
    )
    await state.set_state(FSMFinishShift.beneficiaries)


@router_finish.message(StateFilter(FSMFinishShift.count_of_visitors))
async def warning_visitors_command(message: Message):
    await message.answer(
        text="–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π <b>—á–∏—Å–ª–æ–º</b>",
        parse_mode="html",
        reply_markup=create_cancel_kb(),
    )


@router_finish.callback_query(StateFilter(FSMFinishShift.beneficiaries), F.data == "yes")
async def process_beneficiaries_command_yes(callback: CallbackQuery, state: FSMContext):
    await state.update_data(beneficiaries="yes")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ë—ã–ª–∏ –ª–∏ –ª—å–≥–æ—Ç–Ω–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è?\n\n"
             f"‚û¢ –î–∞",
        parse_mode="html",
    )
    await callback.message.answer(
        text="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –ø–æ–¥—Ç–≤—Ä–µ–∂–¥–∞—é—â–µ–µ —Ñ–æ—Ç–æ (—Å–ø—Ä–∞–≤–∫–∞, –ø–∞—Å–ø–æ—Ä—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π)",
        reply_markup=create_cancel_kb(),
    )
    await callback.answer()
    await state.set_state(FSMFinishShift.photo_of_beneficiaries)


@router_finish.callback_query(StateFilter(FSMFinishShift.beneficiaries), F.data == "no")
async def process_beneficiaries_command_no(callback: CallbackQuery, state: FSMContext):
    await state.update_data(beneficiaries="no")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ë—ã–ª–∏ –ª–∏ –ª—å–≥–æ—Ç–Ω–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è?\n\n"
             f"‚û¢ –ù–µ—Ç",
        parse_mode="html",
    )
    await callback.message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é –≤—ã—Ä—É—á–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
        reply_markup=create_cancel_kb(),
    )
    await callback.answer()
    await state.set_state(FSMFinishShift.summary)


@router_finish.message(StateFilter(FSMFinishShift.beneficiaries))
async def warning_beneficiaries_command(message: Message):
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∏–∂–µ –Ω–∞ –ø–æ—è–≤–∏–≤—à–∏—Ö—Å—è –∫–Ω–æ–ø–∫–∞—Ö",
    )


@router_finish.message(StateFilter(FSMFinishShift.photo_of_beneficiaries))
async def process_photo_of_beneficiaries_command(message: Message, state: FSMContext):
    if message.photo:
        if 'photo_of_beneficiaries' not in await state.get_data():
            await state.update_data(photo_of_beneficiaries=[message.photo[-1].file_id])

        await message.answer(
            text="–í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é –≤—ã—Ä—É—á–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
            reply_markup=create_cancel_kb(),
        )
        await state.set_state(FSMFinishShift.summary)
    else:
        await message.answer(
            text="–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–æ–≤",
            reply_markup=create_cancel_kb(),
        )


@router_finish.message(StateFilter(FSMFinishShift.summary), F.text)
async def process_summary_command(message: Message, state: FSMContext):
    money_message = message.text.lower()
    pattern = r'\b\w*—Ä—É–±–ª[—å—è–µ–π]?\w*\b'

    if "," in message.text:
        money_message = message.text.replace(",", ".")

    money_message = re.sub(pattern, '', money_message)

    await state.update_data(summary=str(Decimal(money_message)))
    await message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞–ª–∏—á–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
        reply_markup=create_cancel_kb(),
    )
    await state.set_state(FSMFinishShift.cash)


@router_finish.message(StateFilter(FSMFinishShift.summary))
async def warning_summary_command(message: Message):
    await message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Å—É–º–º—É <b>—á–∏—Å–ª–æ–º<b>!",
        reply_markup=create_cancel_kb(),
        parse_mode="html",
    )


@router_finish.message(StateFilter(FSMFinishShift.cash), F.text)
async def process_cash_command(message: Message, state: FSMContext):
    await state.update_data(cash=message.text)
    await message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–µ–∑–Ω–∞–ª–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
        reply_markup=create_cancel_kb(),
    )
    await state.set_state(FSMFinishShift.online_cash)


@router_finish.message(StateFilter(FSMFinishShift.cash))
async def warning_cash_command(message: Message):
    await message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞–ª–∏—á–Ω—ã—Ö —á–∏—Å–ª–æ–º!",
        reply_markup=create_cancel_kb(),
    )


@router_finish.message(StateFilter(FSMFinishShift.online_cash), F.text)
async def process_online_cash_command(message: Message, state: FSMContext):
    await state.update_data(online_cash=message.text)
    await message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã –ø–æ QR-–∫–æ–¥—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
        reply_markup=create_cancel_kb(),
    )
    await state.set_state(FSMFinishShift.qr_code)


@router_finish.message(StateFilter(FSMFinishShift.online_cash))
async def warning_online_cash_command(message: Message):
    await message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–µ–∑–Ω–∞–ª–∞ <b>—á–∏—Å–ª–æ–º</b>!",
        reply_markup=create_cancel_kb(),
        parse_mode="html",
    )


@router_finish.message(StateFilter(FSMFinishShift.qr_code), F.text)
async def process_qr_code_command(message: Message, state: FSMContext):
    await state.update_data(qr_code=message.text)
    await message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
        reply_markup=create_cancel_kb(),
    )
    await state.set_state(FSMFinishShift.expenditure)


@router_finish.message(StateFilter(FSMFinishShift.qr_code))
async def warning_qr_code_command(message: Message):
    await message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ QR-–∫–æ–¥—É <b>—á–∏—Å–ª–æ–º</b>!",
        reply_markup=create_cancel_kb(),
        parse_mode="html",
    )


@router_finish.message(StateFilter(FSMFinishShift.expenditure), F.text)
async def process_expenditure_command(message: Message, state: FSMContext):
    await state.update_data(expenditure=message.text)
    await message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, —Å–∫–æ–ª—å–∫–æ –í—ã –≤–∑—è–ª–∏ —Å–µ–≥–æ–¥–Ω—è –∑–∞—Ä–ø–ª–∞—Ç–æ–π\n\n"
             "–ï—Å–ª–∏ –í—ã –Ω–µ –±—Ä–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è –∑–∞—Ä–ø–ª–∞—Ç—É, —Ç–æ –≤–≤–µ–¥–∏—Ç–µ 0",
        reply_markup=create_cancel_kb(),
    )
    await state.set_state(FSMFinishShift.salary)


@router_finish.message(StateFilter(FSMFinishShift.expenditure))
async def warning_expenditure_command(message: Message):
    await message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ <b>—á–∏—Å–ª–æ–º</b>!",
        reply_markup=create_cancel_kb(),
        parse_mode="html",
    )


@router_finish.message(StateFilter(FSMFinishShift.salary), F.text.isdigit())
async def process_salary_command(message: Message, state: FSMContext):
    await state.update_data(salary=message.text)
    await message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏\n\n"
             "–ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏ - –Ω–∞–ø–∏—à–∏—Ç–µ 0",
        reply_markup=create_cancel_kb(),
    )
    await state.set_state(FSMFinishShift.encashment)


@router_finish.message(StateFilter(FSMFinishShift.salary))
async def warning_salary_command(message: Message):
    await message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É <b>—á–∏—Å–ª–æ–º</b>!",
        reply_markup=create_cancel_kb(),
        parse_mode="html",
    )


@router_finish.message(StateFilter(FSMFinishShift.encashment), F.text)
async def process_encashment_command(message: Message, state: FSMContext):
    await state.update_data(encashment=message.text)
    await message.answer(
        text="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —á–µ–∫–∏ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞ —Å–º–µ–Ω—É "
             "(—á–µ–∫–∏ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–º–µ–Ω—ã, –æ–ø–ª–∞—Ç–∞ QR-–∫–æ–¥–∞, —á–µ–∫ —Ä–∞—Å—Ö–æ–¥–∞)",
        reply_markup=create_cancel_kb(),
    )
    await state.set_state(FSMFinishShift.necessary_photos)


@router_finish.message(StateFilter(FSMFinishShift.encashment))
async def warning_encashment_command(message: Message):
    await message.answer(
        text="–ü—Ä–∏—à–ª–∏—Ç–µ —Å—É–º–º—É –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏ <b>—á–∏—Å–ª–æ–º</b>!",
        reply_markup=create_cancel_kb(),
        parse_mode="html",
    )


@router_finish.message(StateFilter(FSMFinishShift.necessary_photos))
async def process_necessary_photos_command(message: Message, state: FSMContext):
    if message.photo:
        if 'necessary_photos' not in await state.get_data():
            await state.update_data(necessary_photos=[message.photo[-1].file_id])

        await message.answer(
            text="–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ø–∞—Ä–æ–≤–æ–∑ –Ω–∞ –∑–∞—Ä—è–¥–∫—É?",
            reply_markup=create_yes_no_kb(),
        )
        await state.set_state(FSMFinishShift.charge)
    else:
        await message.answer(
            text="–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!",
            reply_markup=create_cancel_kb(),
        )


@router_finish.callback_query(StateFilter(FSMFinishShift.charge), F.data == "yes")
async def process_charge_command_yes(callback: CallbackQuery, state: FSMContext):
    await state.update_data(charge="yes")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ø–∞—Ä–æ–≤–æ–∑ –Ω–∞ –∑–∞—Ä—è–¥–∫—É?\n\n"
             f"‚û¢ –î–∞",
        parse_mode="html",
    )
    await callback.message.answer(
        text="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≤–∏–¥–µ–æ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞ –∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –ø–æ–µ–∑–¥–∞!",
        reply_markup=create_cancel_kb(),
    )
    await callback.answer()
    await state.set_state(FSMFinishShift.charge_video)


@router_finish.callback_query(StateFilter(FSMFinishShift.charge), F.data == "no")
async def process_charge_command_no(callback: CallbackQuery, state: FSMContext):
    await state.update_data(charge="no")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ø–∞—Ä–æ–≤–æ–∑ –Ω–∞ –∑–∞—Ä—è–¥–∫—É?\n\n"
             f"‚û¢ –ù–µ—Ç",
        parse_mode="html",
    )
    await callback.message.answer(
        text="–ü–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–∞ –∑–∞—Ä—è–¥–∫—É –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≤–∏–¥–µ–æ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞ –∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –ø–æ–µ–∑–¥–∞!",
        reply_markup=create_cancel_kb(),
    )
    await callback.answer()
    await state.set_state(FSMFinishShift.charge_video)


@router_finish.message(StateFilter(FSMFinishShift.charge))
async def warning_charge_command(message: Message):
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ—è–≤–∏–≤—à–∏—Ö—Å—è –∫–Ω–æ–ø–∫–∞—Ö",
    )


@router_finish.message(StateFilter(FSMFinishShift.charge_video))
async def process_charge_video_command(message: Message, state: FSMContext):
    if message.video:
        if 'charge_video' not in await state.get_data():
            await state.update_data(charge_video=[message.video.file_id])

        finish_shift_dict = await state.get_data()

        day_of_week = datetime.now(tz=timezone(timedelta(hours=3.0))).strftime('%A')
        date = datetime.now(tz=timezone(timedelta(hours=3.0))).strftime(f'%d-%m-%Y - {LEXICON_RU[day_of_week]}')

        await send_report(
            message=message,
            state=state,
            data=finish_shift_dict,
            date=date,
            chat_id=cached_places[finish_shift_dict['place']],
        )
    else:
        await message.answer(
            text="–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∏–¥–µ–æ, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≤–∏–¥–µ–æ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞ –∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –ø–æ–µ–∑–¥–∞!",
            reply_markup=create_cancel_kb(),
        )
