from typing import Dict, Any, Union
from datetime import datetime, timezone, timedelta

from aiogram import Router, F, Bot
from aiogram.types import Message, ReplyKeyboardRemove, InputMediaPhoto, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import default_state
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramAPIError

from src.callbacks.place import PlaceCallbackFactory
from src.fsm.fsm import FSMStartShift
from src.keyboards.keyboard import create_yes_no_kb, create_cancel_kb, create_places_kb, create_rules_kb
from src.middlewares.album_middleware import AlbumsMiddleware
from src.lexicon.lexicon_ru import LEXICON_RU, rules
from src.config import settings
from src.db.queries.dao.dao import AsyncOrm
from src.db import cached_places
import logging

router_start_shift = Router()
router_start_shift.message.middleware(middleware=AlbumsMiddleware(2))
logger = logging.getLogger(__name__)


async def report(dictionary: Dict[str, Any], date: str, user_id: Union[str, int]) -> str:
    return "üìù–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã:\n\n" \
           f"–î–∞—Ç–∞: {date}\n" \
           f"–¢–æ—á–∫–∞: {dictionary['place']}\n" \
           f"–ò–º—è: {await AsyncOrm.get_current_name(user_id=user_id)}\n\n" \
           f"–ù–∞–ª–∏—á–∏–µ –¥–µ—Ñ–µ–∫—Ç–æ–≤: <em>{'no' if dictionary['train_has_defects'] == 'no' else '—Ñ–æ—Ç–æ –Ω–∏–∂–µ'}</em>\n" \
           f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª—ë—Å: <em>{dictionary['wheels_pumped']}</em>\n" \
           f"–°–≤–µ—Ç –∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –Ω–∞ –ø–∞—Ä–æ–≤–æ–∑–µ: <em>{dictionary['train_flash']}</em>\n" \
           f"–ü–∞—Ä–æ–≤–æ–∑ —á–∏—Å—Ç—ã–π: <em>{dictionary['train_clean']}</em>\n" \
           f"–ú–∞–≥–Ω–∏—Ç–æ—Ñ–æ–Ω –≤–∫–ª—é—á–µ–Ω: <em>{dictionary['is_recorder_on']}</em>\n" \
           f"–¢–æ–º–∞—Å –≤–∫–ª—é—á–µ–Ω: <em>{dictionary['is_thomas_on']}</em>"


async def send_report(message: Message, state: FSMContext, data: dict, date: str, chat_id: Union[str, int]):
    try:
        await message.bot.send_message(
            chat_id=chat_id,
            text=await report(
                dictionary=data,
                date=date,
                user_id=message.chat.id,
            ),
            parse_mode="html",
        )
        await message.bot.send_photo(
            chat_id=chat_id,
            photo=data['photo'],
            caption='–§–æ—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞',
        )
        await message.bot.send_video(
            chat_id=chat_id,
            video=data['video'],
            caption='–í–∏–¥–µ–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞',
        )

        if data['train_has_defects'] != "no":
            media_defects = [
                InputMediaPhoto(
                    media=photo_file_id,
                    caption="–§–æ—Ç–æ –¥–µ—Ñ–µ–∫—Ç–æ–≤" if i == 0 else ""
                ) for i, photo_file_id in enumerate(data['train_has_defects'])
            ]

            await message.bot.send_media_group(
                chat_id=chat_id,
                media=media_defects,
            )
        await message.answer(
            text="–û—Ç–ª–∏—á–Ω–æ! –û—Ç—á—ë—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω... –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞—á–∞–ª—å—Å—Ç–≤—É!",
            reply_markup=ReplyKeyboardRemove(),
        )
        await message.answer(
            text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        )

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –Ω–µ —Å —Ç–µ–ª–µ–≥—Ä–∞–º –≤ start_shift.py")
        await message.bot.send_message(
            text=f"Start shift report error: {e}\n"
                 f"User_id: {message.from_user.id}",
            chat_id=settings.ADMIN_ID)
        await message.answer(
            text="–£–ø—Å... —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Å–æ–æ–±—â–∏—Ç–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É!",
        )
    except TelegramAPIError as e:
        logger.exception("–û—à–∏–±–∫–∞ —Å —Ç–µ–ª–µ–≥—Ä–∞–º –≤ start_shift.py")
        await message.bot.send_message(
            text=f"Start shift report error: {e}\n"
                 f"User_id: {message.from_user.id}",
            chat_id=settings.ADMIN_ID)
        await message.answer(
            text="–£–ø—Å... —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Å–æ–æ–±—â–∏—Ç–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É!",
        )
    finally:
        await state.clear()


@router_start_shift.message(Command(commands="start_shift"), StateFilter(default_state))
async def process_place_command(message: Message, state: FSMContext):
    await message.answer(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–∞–±–æ—á—É—é —Ç–æ—á–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ <b>–Ω–∏–∂–µ</b>",
        reply_markup=create_places_kb(),
        parse_mode="html",
    )
    await state.set_state(FSMStartShift.place)


@router_start_shift.callback_query(StateFilter(FSMStartShift.place), PlaceCallbackFactory.filter())
async def process_start_shift_command(callback: CallbackQuery, callback_data: PlaceCallbackFactory, state: FSMContext):
    await state.update_data(place=callback_data.title)
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–∞–±–æ—á—É—é —Ç–æ—á–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ <b>–Ω–∏–∂–µ</b>\n\n"
             f"‚û¢ {callback_data.title}",
        parse_mode="html",
    )
    await callback.message.answer(
        text=f"{rules}",
        reply_markup=create_rules_kb(),
        parse_mode="html",
    )
    await callback.answer()
    await state.set_state(FSMStartShift.policy)


@router_start_shift.message(StateFilter(FSMStartShift.place))
async def warning_place_command(message: Message):
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—á—É—é —Ç–æ—á–∫—É –Ω–∏–∂–µ –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞",
        reply_markup=create_cancel_kb(),
    )


@router_start_shift.callback_query(StateFilter(FSMStartShift.policy), F.data == "agree")
async def process_policy_command(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await state.update_data(policy="agree")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text=f"{rules}\n\n"
             "‚û¢ –°–æ–≥–ª–∞—Å–µ–Ω",
        parse_mode="html",
    )
    await callback.message.answer(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –í–∞—à–µ —Ñ–æ—Ç–æ –Ω–∞ —Ä–∞–±–æ—á–µ–º –º–µ—Å—Ç–µ",
        reply_markup=create_cancel_kb(),
    )
    await callback.answer()
    await state.set_state(FSMStartShift.my_photo)


@router_start_shift.message(StateFilter(FSMStartShift.policy))
async def warning_policy_command(message: Message):
    await message.answer(
        text="–î–ª—è —Å–æ–≥–ª–∞—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–∞–º–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏!",
        reply_markup=create_cancel_kb(),
    )


@router_start_shift.message(StateFilter(FSMStartShift.my_photo), F.photo)
async def process_get_photo(message: Message, state: FSMContext):
    await state.update_data(photo=message.photo[-1].file_id)
    await message.answer(
        text="–û—Ç–ª–∏—á–Ω–æ, –∞ —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –≤–∏–¥–µ–æ –ø–∞—Ä–æ–≤–æ–∑–∞ (–≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏)",
        reply_markup=create_cancel_kb(),
    )
    await state.set_state(FSMStartShift.my_video)


@router_start_shift.message(StateFilter(FSMStartShift.my_photo))
async def warning_get_photo(message: Message):
    await message.answer(
        text="–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ñ–æ—Ç–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑",
        reply_markup=create_cancel_kb(),
    )


@router_start_shift.message(StateFilter(FSMStartShift.my_video), F.video)
async def process_get_video(message: Message, state: FSMContext):
    await state.update_data(video=message.video.file_id)
    await message.answer(
        text="–û—Ç–ª–∏—á–Ω–æ, –∞ —Ç–µ–ø–µ—Ä—å —è –∑–∞–¥–∞–º —Ä—è–¥ –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –í–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å!\n\n"
             "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–æ–≤–æ–∑ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–µ—Ñ–µ–∫—Ç–æ–≤. –ï—Å—Ç—å –ª–∏ –¥–µ—Ñ–µ–∫—Ç—ã?",
        reply_markup=create_yes_no_kb(),
    )
    await state.set_state(FSMStartShift.wait_for_defects)


@router_start_shift.message(StateFilter(FSMStartShift.my_video))
async def warning_get_video(message: Message):
    await message.answer(
        text="–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∏–¥–µ–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
        reply_markup=create_cancel_kb(),
    )


@router_start_shift.callback_query(StateFilter(FSMStartShift.wait_for_defects), F.data == "yes")
async def process_defects_true(callback: CallbackQuery, state: FSMContext):
    await state.update_data(train_has_defects="yes")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–û—Ç–ª–∏—á–Ω–æ, –∞ —Ç–µ–ø–µ—Ä—å —è –∑–∞–¥–∞–º —Ä—è–¥ –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –í–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å!\n\n"
             "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–æ–≤–æ–∑ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–µ—Ñ–µ–∫—Ç–æ–≤. –ï—Å—Ç—å –ª–∏ –¥–µ—Ñ–µ–∫—Ç—ã?\n\n"
             "‚û¢ –î–∞",
        parse_mode="html",
    )
    await callback.message.answer(
        text="–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–µ—Ñ–µ–∫—Ç–æ–≤",
        reply_markup=create_cancel_kb(),
    )
    await callback.answer()
    await state.set_state(FSMStartShift.photo_of_defects)


@router_start_shift.callback_query(StateFilter(FSMStartShift.wait_for_defects), F.data == "no")
async def process_defects_false(callback: CallbackQuery, state: FSMContext):
    await state.update_data(train_has_defects="no")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–û—Ç–ª–∏—á–Ω–æ, –∞ —Ç–µ–ø–µ—Ä—å —è –∑–∞–¥–∞–º —Ä—è–¥ –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –í–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å!\n\n"
             "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–æ–≤–æ–∑ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–µ—Ñ–µ–∫—Ç–æ–≤. –ï—Å—Ç—å –ª–∏ –¥–µ—Ñ–µ–∫—Ç—ã?\n\n"
             "‚û¢ –ù–µ—Ç",
        parse_mode="html",
    )
    await callback.message.answer(
        text="–í—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –∫–æ–ª—ë—Å–∞ —É –ø–∞—Ä–æ–≤–æ–∑–∞, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –æ–Ω–∏ –Ω–∞–∫–∞—á–µ–Ω—ã?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMStartShift.wheels)


@router_start_shift.message(StateFilter(FSMStartShift.wait_for_defects))
async def warning_process_defects(message: Message):
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∏–∂–µ –Ω–∞ –ø–æ—è–≤–∏–≤—à–∏—Ö—Å—è –∫–Ω–æ–ø–∫–∞—Ö",
    )


@router_start_shift.message(StateFilter(FSMStartShift.photo_of_defects))
async def process_need_to_photo_of_defects(message: Message, state: FSMContext):
    if message.photo:
        if 'train_has_defects' not in await state.get_data():
            await state.update_data(train_has_defects=[message.photo[-1].file_id])

        await message.answer(
            text="–í—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –∫–æ–ª—ë—Å–∞ —É –ø–∞—Ä–æ–≤–æ–∑–∞, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –æ–Ω–∏ –Ω–∞–∫–∞—á–µ–Ω—ã?",
            reply_markup=create_yes_no_kb(),
        )
        await state.set_state(FSMStartShift.wheels)
    else:
        await message.answer(
            text="–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–µ—Ñ–µ–∫—Ç–æ–≤",
            reply_markup=create_cancel_kb(),
        )


@router_start_shift.callback_query(StateFilter(FSMStartShift.wheels), F.data == "yes")
async def process_wheels_command_yes(callback: CallbackQuery, state: FSMContext):
    await state.update_data(wheels_pumped="yes")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–í—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –∫–æ–ª—ë—Å–∞ —É –ø–∞—Ä–æ–≤–æ–∑–∞, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –æ–Ω–∏ –Ω–∞–∫–∞—á–µ–Ω—ã?\n\n"
             "‚û¢ –î–∞",
        parse_mode="html",
    )
    await callback.message.answer(
        text="–í–∫–ª—é—á–∏–ª–∏ –ª–∏ –í—ã —Å–≤–µ—Ç –∏ –ø–æ–¥—Å–≤–µ—Ç–∫—É –Ω–∞ –ø–∞—Ä–æ–≤–æ–∑–µ?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMStartShift.train_flash)


@router_start_shift.callback_query(StateFilter(FSMStartShift.wheels), F.data == "no")
async def process_wheels_command_no(callback: CallbackQuery, state: FSMContext):
    await state.update_data(wheels_pumped="no")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–í—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –∫–æ–ª—ë—Å–∞ —É –ø–∞—Ä–æ–≤–æ–∑–∞, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –æ–Ω–∏ –Ω–∞–∫–∞—á–µ–Ω—ã?\n\n"
             "‚û¢ –ù–µ—Ç",
        parse_mode="html",
    )
    await callback.message.answer(
        text="–ù—É–∂–Ω–æ –ø–æ–¥–∫–∞—á–∞—Ç—å –∫–æ–ª—ë—Å–∞!\n\n–í—ã –≤–∫–ª—é—á–∏–ª–∏ —Å–≤–µ—Ç –∏ –ø–æ–¥—Å–≤–µ—Ç–∫—É –Ω–∞ –ø–∞—Ä–æ–≤–æ–∑–µ?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMStartShift.train_flash)


@router_start_shift.message(StateFilter(FSMStartShift.wheels))
async def warning_process_wheels(message: Message):
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∏–∂–µ –Ω–∞ –ø–æ—è–≤–∏–≤—à–∏—Ö—Å—è –∫–Ω–æ–ø–∫–∞—Ö",
    )


@router_start_shift.callback_query(StateFilter(FSMStartShift.train_flash), F.data == "yes")
async def process_train_flash_command_yes(callback: CallbackQuery, state: FSMContext):
    await state.update_data(train_flash="yes")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–í—ã –≤–∫–ª—é—á–∏–ª–∏ —Å–≤–µ—Ç –∏ –ø–æ–¥—Å–≤–µ—Ç–∫—É –Ω–∞ –ø–∞—Ä–æ–≤–æ–∑–µ?\n\n"
             "‚û¢ –î–∞",
        parse_mode="html",
    )
    await callback.message.answer(
        text="–í—ã –ø—Ä–æ—Ç—ë—Ä–ª–∏ –ø–∞—Ä–æ–≤–æ–∑ –æ—Ç –ø—ã–ª–∏?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMStartShift.train_clean)


@router_start_shift.callback_query(StateFilter(FSMStartShift.train_flash), F.data == "no")
async def process_train_flash_command_no(callback: CallbackQuery, state: FSMContext):
    await state.update_data(train_flash="no")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–í—ã –≤–∫–ª—é—á–∏–ª–∏ —Å–≤–µ—Ç –∏ –ø–æ–¥—Å–≤–µ—Ç–∫—É –Ω–∞ –ø–∞—Ä–æ–≤–æ–∑–µ?\n\n"
             "‚û¢ –ù–µ—Ç",
        parse_mode="html",
    )
    await callback.message.answer(
        text="–ù—É–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Å–≤–µ—Ç–∫—É!\n\n–í—ã –ø—Ä–æ—Ç—ë—Ä–ª–∏ –ø–∞—Ä–æ–≤–æ–∑ –æ—Ç –ø—ã–ª–∏?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMStartShift.train_clean)


@router_start_shift.message(StateFilter(FSMStartShift.train_flash))
async def warning_process_train_flash(message: Message):
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∏–∂–µ –Ω–∞ –ø–æ—è–≤–∏–≤—à–∏—Ö—Å—è –∫–Ω–æ–ø–∫–∞—Ö",
    )


@router_start_shift.callback_query(StateFilter(FSMStartShift.train_clean), F.data == "yes")
async def process_train_clean_command_yes(callback: CallbackQuery, state: FSMContext):
    await state.update_data(train_clean="yes")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–í—ã –ø—Ä–æ—Ç—ë—Ä–ª–∏ –ø–∞—Ä–æ–≤–æ–∑ –æ—Ç –ø—ã–ª–∏?\n\n"
             "‚û¢ –î–∞",
        parse_mode="html",
    )
    await callback.message.answer(
        text="–í—ã –≤–∫–ª—é—á–∏–ª–∏ –º–∞–≥–Ω–∏—Ç–æ—Ñ–æ–Ω?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMStartShift.recorder)


@router_start_shift.callback_query(StateFilter(FSMStartShift.train_clean), F.data == "no")
async def process_train_clean_command_no(callback: CallbackQuery, state: FSMContext):
    await state.update_data(train_clean="no")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–í—ã –ø—Ä–æ—Ç—ë—Ä–ª–∏ –ø–∞—Ä–æ–≤–æ–∑ –æ—Ç –ø—ã–ª–∏?\n\n"
             "‚û¢ –ù–µ—Ç",
        parse_mode="html",
    )
    await callback.message.answer(
        text="–ù—É–∂–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Ç–µ—Ä–µ—Ç—å –ø–∞—Ä–æ–≤–æ–∑!\n\n–í—ã –≤–∫–ª—é—á–∏–ª–∏ –º–∞–≥–Ω–∏—Ç–æ—Ñ–æ–Ω?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMStartShift.recorder)


@router_start_shift.callback_query(StateFilter(FSMStartShift.recorder), F.data == "yes")
async def process_recorder_command_yes(callback: CallbackQuery, state: FSMContext):
    await state.update_data(is_recorder_on="yes")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–í—ã –≤–∫–ª—é—á–∏–ª–∏ –º–∞–≥–Ω–∏—Ç–æ—Ñ–æ–Ω?\n\n"
             "‚û¢ –î–∞",
        parse_mode="html",
    )
    await callback.message.answer(
        text="–í—ã –≤–∫–ª—é—á–∏–ª–∏ –¢–æ–º–∞—Å?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMStartShift.thomas)


@router_start_shift.callback_query(StateFilter(FSMStartShift.recorder), F.data == "no")
async def process_recorder_command_no(callback: CallbackQuery, state: FSMContext):
    await state.update_data(is_recorder_on="no")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–í—ã –≤–∫–ª—é—á–∏–ª–∏ –º–∞–≥–Ω–∏—Ç–æ—Ñ–æ–Ω?\n\n"
             "‚û¢ –ù–µ—Ç",
        parse_mode="html",
    )
    await callback.message.answer(
        text="–í—Å—Ç–∞–≤—å—Ç–µ —Ñ–ª–µ—à–∫—É –∏ –≤–∫–ª—é—á–∏—Ç–µ!\n\n–í—ã –≤–∫–ª—é—á–∏–ª–∏ –¢–æ–º–∞—Å?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMStartShift.thomas)


@router_start_shift.message(StateFilter(FSMStartShift.recorder))
async def warning_process_train_clean(message: Message):
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∏–∂–µ –Ω–∞ –ø–æ—è–≤–∏–≤—à–∏—Ö—Å—è –∫–Ω–æ–ø–∫–∞—Ö",
    )


@router_start_shift.callback_query(StateFilter(FSMStartShift.thomas), F.data == "yes")
async def process_thomas_command_yes(callback: CallbackQuery, state: FSMContext):
    await state.update_data(is_thomas_on="yes")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–í—ã –≤–∫–ª—é—á–∏–ª–∏ –¢–æ–º–∞—Å?\n\n"
             "‚û¢ –î–∞",
        parse_mode="html",
    )

    day_of_week = datetime.now(tz=timezone(timedelta(hours=3.0))).strftime('%A')
    current_date = datetime.now(tz=timezone(timedelta(hours=3.0))).strftime(f'%d/%m/%Y - {LEXICON_RU[day_of_week]}')

    start_shift_dict = await state.get_data()

    await send_report(
        message=callback.message,
        state=state,
        data=start_shift_dict,
        date=current_date,
        chat_id=cached_places[start_shift_dict['place']],
    )
    await callback.answer()


@router_start_shift.callback_query(StateFilter(FSMStartShift.thomas), F.data == "no")
async def process_thomas_command_no(callback: CallbackQuery, state: FSMContext):
    await state.update_data(is_thomas_on="no")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–í—ã –≤–∫–ª—é—á–∏–ª–∏ –¢–æ–º–∞—Å?\n\n"
             "‚û¢ –ù–µ—Ç",
        parse_mode="html",
    )
    await callback.message.answer(
        text="–ù–∞–¥–æ –≤–∫–ª—é—á–∏—Ç—å!",
    )

    day_of_week = datetime.now(tz=timezone(timedelta(hours=3.0))).strftime('%A')
    current_date = datetime.now(tz=timezone(timedelta(hours=3.0))).strftime(f'%d/%m/%Y - {LEXICON_RU[day_of_week]}')

    start_shift_dict = await state.get_data()

    await send_report(
        message=callback.message,
        state=state,
        data=start_shift_dict,
        date=current_date,
        chat_id=cached_places[start_shift_dict['place']],
    )
    await callback.answer()


@router_start_shift.message(StateFilter(FSMStartShift.thomas))
async def warning_thomas_command(message: Message):
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∏–∂–µ –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞!",
        reply_markup=create_yes_no_kb(),
    )
