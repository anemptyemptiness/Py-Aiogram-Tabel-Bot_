from datetime import datetime, timezone, timedelta, date

from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton
from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from src.db.queries.dao.dao import AsyncOrm
from src.fsm.fsm import FSMStatisticsVisitors, FSMStatistics
from src.handlers.admin_handler import router_admin
from src.keyboards.adm_keyboard import create_stats_kb, create_stats_visitors_kb

router_adm_visitors = Router()
router_admin.include_router(router_adm_visitors)


async def get_report_visitors_by_date(
        date_from: date,
        date_to: date
):
    places = dict()
    data = await AsyncOrm.get_visitors_data_from_reports_by_date(
        date_from=date_from,
        date_to=date_to,
    )

    for place_title, fullname, _, total_visitors in data:
        places.setdefault(place_title, []).append((fullname, total_visitors))

    report = f"üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è–º —Ç–æ—á–µ–∫\n<b>–æ—Ç</b> {date_from.strftime('%d.%m.%Y')}" \
             f" <b>–¥–æ</b> {date_to.strftime('%d.%m.%Y')}\n\n"

    for key in sorted(places.keys()):
        if places[key]:
            report += f"–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞: <b>{key}</b>\n"

            for fullname, visitors in places[key]:
                report += f"üìù–†–∞–±–æ—Ç–Ω–∏–∫: <em>{fullname}</em>\n‚îî"
                report += f"–ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π: <em>{visitors}</em>\n"

            report += "\n"

    return report


@router_adm_visitors.callback_query(StateFilter(FSMStatisticsVisitors.in_stats), F.data == "adm_visitors_is_here")
async def process_adm_visitors_is_here_command(callback: CallbackQuery):
    await callback.answer(text="–í—ã —É–∂–µ –Ω–∞–∂–∞–ª–∏ —ç—Ç—É –∫–Ω–æ–ø–∫—É")


@router_adm_visitors.callback_query(StateFilter(FSMStatisticsVisitors.in_stats), F.data == "adm_exit")
async def process_adm_exit_command(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
    )
    await callback.answer()
    await state.clear()


@router_adm_visitors.callback_query(StateFilter(FSMStatisticsVisitors.in_stats), F.data == "adm_stats_visitors_back")
async def process_adm_stats_visitors_back_command(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:",
        reply_markup=create_stats_kb(),
    )
    await callback.answer()
    await state.set_state(FSMStatistics.in_stats)


@router_adm_visitors.callback_query(StateFilter(FSMStatisticsVisitors.in_stats), F.data == "adm_visitors_by_week")
async def process_adm_visitors_by_week_command(callback: CallbackQuery):
    date_now = datetime.now(tz=timezone(timedelta(hours=3.0))).date()
    date_last_week = date_now - timedelta(days=7)

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–ù–µ–¥–µ–ª—è‚úÖ", callback_data="adm_visitors_is_here"),
        InlineKeyboardButton(text="–ú–µ—Å—è—Ü", callback_data="adm_visitors_by_month"),
        InlineKeyboardButton(text="–ì–æ–¥", callback_data="adm_visitors_by_year"),
    )
    builder.row(
        InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é", callback_data="adm_visitors_by_custom"),
    )
    builder.row(
        InlineKeyboardButton(text="‚û¢ –ù–∞–∑–∞–¥", callback_data="adm_stats_visitors_back"),
        InlineKeyboardButton(text="‚û¢ –í—ã—Ö–æ–¥", callback_data="adm_exit"),
    )

    await callback.message.edit_text(
        text=await get_report_visitors_by_date(
            date_from=date_last_week,
            date_to=date_now,
        ),
        reply_markup=builder.as_markup(),
        parse_mode="html",
    )
    await callback.answer()


@router_adm_visitors.callback_query(StateFilter(FSMStatisticsVisitors.in_stats), F.data == "adm_visitors_by_month")
async def process_adm_visitors_by_month_command(callback: CallbackQuery):
    date_now = datetime.now(tz=timezone(timedelta(hours=3.0))).date()
    date_last_week = date_now - timedelta(days=30)

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–ù–µ–¥–µ–ª—è", callback_data="adm_visitors_by_week"),
        InlineKeyboardButton(text="–ú–µ—Å—è—Ü‚úÖ", callback_data="adm_visitors_is_here"),
        InlineKeyboardButton(text="–ì–æ–¥", callback_data="adm_visitors_by_year"),
    )
    builder.row(
        InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é", callback_data="adm_visitors_by_custom"),
    )
    builder.row(
        InlineKeyboardButton(text="‚û¢ –ù–∞–∑–∞–¥", callback_data="adm_stats_visitors_back"),
        InlineKeyboardButton(text="‚û¢ –í—ã—Ö–æ–¥", callback_data="adm_exit"),
    )

    await callback.message.edit_text(
        text=await get_report_visitors_by_date(
            date_from=date_last_week,
            date_to=date_now,
        ),
        reply_markup=builder.as_markup(),
        parse_mode="html",
    )
    await callback.answer()


@router_adm_visitors.callback_query(StateFilter(FSMStatisticsVisitors.in_stats), F.data == "adm_visitors_by_year")
async def process_adm_visitors_by_year_command(callback: CallbackQuery):
    date_now = datetime.now(tz=timezone(timedelta(hours=3.0))).date()
    date_last_week = date_now - timedelta(days=365)

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–ù–µ–¥–µ–ª—è", callback_data="adm_visitors_by_week"),
        InlineKeyboardButton(text="–ú–µ—Å—è—Ü", callback_data="adm_visitors_by_year"),
        InlineKeyboardButton(text="–ì–æ–¥‚úÖ", callback_data="adm_visitors_is_here"),
    )
    builder.row(
        InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é", callback_data="adm_visitors_by_custom"),
    )
    builder.row(
        InlineKeyboardButton(text="‚û¢ –ù–∞–∑–∞–¥", callback_data="adm_stats_visitors_back"),
        InlineKeyboardButton(text="‚û¢ –í—ã—Ö–æ–¥", callback_data="adm_exit"),
    )

    await callback.message.edit_text(
        text=await get_report_visitors_by_date(
            date_from=date_last_week,
            date_to=date_now,
        ),
        reply_markup=builder.as_markup(),
        parse_mode="html",
    )
    await callback.answer()


@router_adm_visitors.callback_query(StateFilter(FSMStatisticsVisitors.in_stats), F.data == "adm_visitors_by_custom")
async def process_adm_visitors_by_custom_command(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete_reply_markup()

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚û¢ –ù–∞–∑–∞–¥", callback_data="adm_stats_visitors_back_from_custom"))

    await callback.message.edit_text(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é –í–∞–º –¥–∞—Ç—É –≤ <b>–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</b>, "
             "–∏–Ω–∞—á–µ —è –Ω–µ —Å–º–æ–≥—É –ø–æ–Ω—è—Ç—å –í–∞—Å!\n\n"
             "–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –ø–µ—Ä–≤–æ–π –¥–∞—Ç–æ–π –∑–Ω–∞—á–µ–Ω–∏–µ, <b>–æ—Ç</b> –∫–æ—Ç–æ—Ä–æ–≥–æ –º–Ω–µ –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å (–≤–∫–ª—é—á–∞—è —ç—Ç—É –¥–∞—Ç—É), "
             "–∞ –≤—Ç–æ—Ä–æ–π –¥–∞—Ç–æ–π –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ, <b>–¥–æ</b> –∫–æ—Ç–æ—Ä–æ–≥–æ –º–Ω–µ –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å (—Ç–æ–∂–µ –≤–∫–ª—é—á–∞—è —ç—Ç—É –¥–∞—Ç—É)\n\n"
             "–ù–∞–ø—Ä–∏–º–µ—Ä: <em><b>01.01.24 31.12.24</b></em>\n"
             "–¢–∞–∫–∞—è –∑–∞–ø–∏—Å—å –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —è –±—É–¥—É —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥ "
             "–æ—Ç 1 —è–Ω–≤–∞—Ä—è 2024 –¥–æ 31 –¥–µ–∫–∞–±—Ä—è 2024 –≥–æ–¥–∞",
        reply_markup=builder.as_markup(),
        parse_mode="html",
    )
    await callback.answer()
    await state.set_state(FSMStatisticsVisitors.custom_date)


@router_adm_visitors.message(StateFilter(FSMStatisticsVisitors.custom_date), F.text)
async def process_adm_visitors_custom_date_command(message: Message, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚û¢ –ù–∞–∑–∞–¥", callback_data="adm_stats_visitors_back_from_custom"))

    date_from: str = ""
    date_to: str = ""

    try:
        date_from, date_to = message.text.split(sep=" ", maxsplit=1)
    except ValueError:
        await message.answer(
            text="–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!\n\n"
                 "–£ –º–µ–Ω—è –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞—Ç—É –∏–∑ –í–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, "
                 "–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ—ë –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!\n\n"
                 "–Ø –æ–∂–∏–¥–∞—é –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–≤—É–º—è –¥–∞—Ç–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —è –º–æ–≥—É —Ä–∞–∑–¥–µ–ª–∏—Ç—å "
                 "<b>–æ–¥–Ω–∏–º</b> –ø—Ä–æ–±–µ–ª–æ–º\n\n"
                 '–ù–∞–ø—Ä–∏–º–µ—Ä: <em>"–¥–¥.–º–º.–≥–≥ –¥–¥.–º–º.–≥–≥"</em>\n'
                 '–í–∏–¥–∏—Ç–µ? –¢—É—Ç –≤—Å–µ–≥–æ –ª–∏—à—å –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª',
            reply_markup=builder.as_markup(),
            parse_mode="html",
        )
        return

    if date_from and date_to and len(message.text.split()) == 2 and date_to.count(".") == 2 and date_from.count(".") == 2:
        try:
            date_from: date = datetime.strptime(date_from, "%d.%m.%y").date()
            date_to: date = datetime.strptime(date_to, "%d.%m.%y").date()

            await message.answer(
                text=await get_report_visitors_by_date(
                    date_from=date_from,
                    date_to=date_to,
                ),
                reply_markup=create_stats_visitors_kb(),
                parse_mode="html",
            )
            await state.set_state(FSMStatisticsVisitors.in_stats)
        except ValueError:
            try:
                date_from: date = datetime.strptime(date_from, "%d.%m.%Y").date()
                date_to: date = datetime.strptime(date_to, "%d.%m.%Y").date()

                await message.answer(
                    text=await get_report_visitors_by_date(
                        date_from=date_from,
                        date_to=date_to,
                    ),
                    reply_markup=create_stats_visitors_kb(),
                    parse_mode="html",
                )
                await state.set_state(FSMStatisticsVisitors.in_stats)
            except ValueError:
                await message.answer(
                    text="–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!\n\n"
                         "–Ø –æ–∂–∏–¥–∞—é –æ—Ç –í–∞—Å –ª–∏–±–æ —Ç–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç:\n"
                         "<em><b>–¥–¥.–º–º.–≥–≥</b></em>, –≥–¥–µ –≤—Å–µ —Ü–∏—Ñ—Ä—ã –¥–≤—É–∑–Ω–∞—á–Ω—ã,\n"
                         "–ª–∏–±–æ —Ç–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç:\n"
                         "<em><b>–¥–¥.–º–º.–≥–≥–≥–≥</b></em>, –≥–¥–µ –≤—Å–µ –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü –¥–≤—É–∑–Ω–∞—á–Ω—ã, "
                         "–∞ –≥–æ–¥ - —á–µ—Ç—ã—Ä—ë—Ö–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ",
                    reply_markup=builder.as_markup(),
                    parse_mode="html",
                )
                return
    else:
        await message.answer(
            text="–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!\n\n"
                 "–Ø –æ–∂–∏–¥–∞—é —É–≤–∏–¥–µ—Ç—å –¥–∞—Ç—É —Å –Ω—É–∂–Ω—ã–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º —Ç–æ—á–µ–∫!\n"
                 "–ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ –¥–¥<b>..</b>–º–º.–≥–≥, –∞ –¥–¥<b>.</b>–º–º<b>.</b>–≥–≥",
            reply_markup=builder.as_markup(),
            parse_mode="html",
        )


@router_adm_visitors.callback_query(StateFilter(FSMStatisticsVisitors.custom_date), F.data == "adm_stats_visitors_back_from_custom")
async def process_adm_stats_visitors_back_from_custom_command(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π:",
        reply_markup=create_stats_visitors_kb(),
    )
    await callback.answer()
    await state.set_state(FSMStatisticsVisitors.in_stats)


@router_adm_visitors.callback_query(StateFilter(FSMStatisticsVisitors.in_stats), F.data == "adm_stats_visitors_back_from_custom")
async def process_adm_stats_visitors_back_from_custom_command(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π:",
        reply_markup=create_stats_visitors_kb(),
    )
    await callback.answer()
    await state.set_state(FSMStatisticsVisitors.in_stats)