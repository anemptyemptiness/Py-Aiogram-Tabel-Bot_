from datetime import datetime, timezone, timedelta
import time

from aiogram.types import Message, CallbackQuery
from aiogram import Router, F, Bot
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext

from db import DB
from fsm.fsm import FSMAdmin
from filters.is_admin import isAdminFilter
from config.config import config
from keyboards.keyboards import create_admin_kb, create_money_or_visitors_kb

router_adm = Router()


async def report_visitors_in_range(date_from: str, date_to: str, msg: Message):
    rows = DB.get_statistics_visitors(date_from=date_from, date_to=date_to)
    places = {
        "–ë–µ–ª–∞—è –î–∞—á–∞": sum([row[0].count("–ë–µ–ª–∞—è –î–∞—á–∞") for row in rows]),
        "–†–∏–≤—å–µ—Ä–∞": sum([row[0].count("–†–∏–≤—å–µ—Ä–∞") for row in rows]),
        "–†–∏–≥–∞ –ú–æ–ª–ª": sum([row[0].count("–†–∏–≥–∞ –ú–æ–ª–ª") for row in rows]),
        "–í–µ–≥–∞—Å –ö—É–Ω—Ü–µ–≤–æ": sum([row[0].count("–í–µ–≥–∞—Å –ö—É–Ω—Ü–µ–≤–æ") for row in rows]),
        "–©–µ–ª–∫–æ–≤—Å–∫–∏–π": sum([row[0].count("–©–µ–ª–∫–æ–≤—Å–∫–∏–π") for row in rows]),
    }

    report = f"üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è–º —Ç–æ—á–µ–∫\n<b>–æ—Ç</b> {date_from} <b>–¥–æ</b> {date_to}\n\n"
    index_place = 0
    index_rows = 0

    for count in places.values():
        if count:
            report += f"–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞: <b>{rows[index_place][0]}</b>\n"

            for i in range(count):
                report += f"üìù–†–∞–±–æ—Ç–Ω–∏–∫: <em>{rows[index_rows][1]}</em>\n‚îî"
                report += f"–ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π: <em>{rows[index_rows][3]}</em>\n\n"

                index_rows += 1

            report += "\n"
            index_place += count

    await msg.answer(
        text=report,
        parse_mode="html",
        reply_markup=await create_admin_kb()
    )


async def report_money_in_range(date_from: str, date_to: str, msg: Message):
    rows = DB.get_statistics_money(date_from=date_from, date_to=date_to)
    places = {
        "–ë–µ–ª–∞—è –î–∞—á–∞": sum([row[0].count("–ë–µ–ª–∞—è –î–∞—á–∞") for row in rows]),
        "–†–∏–≤—å–µ—Ä–∞": sum([row[0].count("–†–∏–≤—å–µ—Ä–∞") for row in rows]),
        "–†–∏–≥–∞ –ú–æ–ª–ª": sum([row[0].count("–†–∏–≥–∞ –ú–æ–ª–ª") for row in rows]),
        "–í–µ–≥–∞—Å –ö—É–Ω—Ü–µ–≤–æ": sum([row[0].count("–í–µ–≥–∞—Å –ö—É–Ω—Ü–µ–≤–æ") for row in rows]),
        "–©–µ–ª–∫–æ–≤—Å–∫–∏–π": sum([row[0].count("–©–µ–ª–∫–æ–≤—Å–∫–∏–π") for row in rows]),
    }

    report = f"üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏—Ö–æ–¥—É —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –Ω–∞ —Ç–æ—á–∫–∞—Ö\n<b>–æ—Ç</b> {date_from} <b>–¥–æ</b> {date_to}\n\n"
    index_place = 0
    index_rows = 0

    for count in places.values():
        if count:
            report += f"–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞: <b>{rows[index_place][0]}</b>\n"

            for i in range(count):
                report += f"üìù–†–∞–±–æ—Ç–Ω–∏–∫: <em>{rows[index_rows][1]}</em>\n‚îî"
                report += f"–≤—ã—Ä—É—á–∫–∞: <em>{rows[index_rows][3]}</em> <b>‚ÇΩ</b>\n\n"

                index_rows += 1

            report += "\n"
            index_place += count

    total_money = DB.get_total_money(date_from=date_from, date_to=date_to)

    await msg.answer(
        text=f"{report}"
             f"üí∞–°—É–º–º–∞—Ä–Ω–æ –¥–µ–Ω–µ–≥ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:\n‚îî<em>{total_money}</em> <b>‚ÇΩ</b>",
        parse_mode="html",
        reply_markup=await create_admin_kb(),
    )


@router_adm.message(Command(commands="stats"), isAdminFilter(config.admins))
async def process_get_stats_command(message: Message, state: FSMContext):
    await state.set_state(FSMAdmin.stats)
    await message.answer(text="‚è≥–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É",
                         reply_markup=await create_money_or_visitors_kb())


@router_adm.callback_query(isAdminFilter(config.admins), StateFilter(FSMAdmin.stats), F.data == "visitors")
async def get_visitors_menu(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await state.set_state(FSMAdmin.visitors)
    await bot.delete_message(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id
    )
    await callback.message.answer(text="‚è≥–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω",
                                  reply_markup=await create_admin_kb())


@router_adm.callback_query(isAdminFilter(config.admins), StateFilter(FSMAdmin.visitors), F.data == "last_week")
async def get_stats_week(callback: CallbackQuery, bot: Bot):
    try:
        date_to = datetime.now(tz=timezone(timedelta(hours=3.0)))
        date_from = date_to - timedelta(days=7)

        await callback.answer(text="‚è≥")

        await bot.delete_message(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id
        )

        time.sleep(0.5)

        await report_visitors_in_range(date_from.strftime("%d.%m.%Y"), date_to.strftime("%d.%m.%Y"), callback.message)
    except Exception as e:
        await callback.message.bot.send_message(text=f"Get stats-visitors last week error: {e}\n"
                                                     f"User_id: {callback.message.from_user.id}",
                                                chat_id=config.admins[0])
        await callback.message.answer(text="‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï ‚ö†Ô∏è\n\n"
                                           "–í–æ–∑–Ω–∏–∫–ª–∞ <b>–æ—à–∏–±–∫–∞</b> –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö, "
                                           "–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É",
                                      parse_mode="html")


@router_adm.callback_query(isAdminFilter(config.admins), StateFilter(FSMAdmin.visitors), F.data == "last_month")
async def get_stats_month(callback: CallbackQuery, bot: Bot):
    try:
        date_to = datetime.now(tz=timezone(timedelta(hours=3.0)))
        date_from = date_to - timedelta(days=30)

        await callback.answer(text="‚è≥")

        await bot.delete_message(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id
        )

        time.sleep(0.5)

        await report_visitors_in_range(date_from.strftime("%d.%m.%Y"), date_to.strftime("%d.%m.%Y"), callback.message)
    except Exception as e:
        await callback.message.bot.send_message(text=f"Get stats-visitors last month error: {e}\n"
                                                     f"User_id: {callback.message.from_user.id}",
                                                chat_id=config.admins[0])
        await callback.message.answer(text="‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï ‚ö†Ô∏è\n\n"
                                           "–í–æ–∑–Ω–∏–∫–ª–∞ <b>–æ—à–∏–±–∫–∞</b> –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö, "
                                           "–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É",
                                      parse_mode="html")


@router_adm.callback_query(isAdminFilter(config.admins), StateFilter(FSMAdmin.visitors), F.data == "last_year")
async def get_stats_year(callback: CallbackQuery, bot: Bot):
    try:
        date_to = datetime.now(tz=timezone(timedelta(hours=3.0)))
        date_from = date_to - timedelta(days=365)

        await callback.answer(text="‚è≥")

        await bot.delete_message(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id
        )

        time.sleep(0.5)

        await report_visitors_in_range(date_from.strftime("%d.%m.%Y"), date_to.strftime("%d.%m.%Y"), callback.message)
    except Exception as e:
        await callback.message.bot.send_message(text=f"Get stats-visitors last year error: {e}\n"
                                                     f"User_id: {callback.message.from_user.id}",
                                                chat_id=config.admins[0])
        await callback.message.answer(text="‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï ‚ö†Ô∏è\n\n"
                                           "–í–æ–∑–Ω–∏–∫–ª–∞ <b>–æ—à–∏–±–∫–∞</b> –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö, "
                                           "–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É",
                                      parse_mode="html")


@router_adm.callback_query(isAdminFilter(config.admins), StateFilter(FSMAdmin.visitors), F.data == "by_hand")
async def prepare_for_get_stats_by_hand(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await state.set_state(FSMAdmin.visitors_by_hand)
    await callback.answer(text="üëåüèª")
    await bot.delete_message(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
    )
    await callback.message.answer(text="‚è≥–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç <b>—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª</b>\n\n"
                                       "–ù–∞–ø—Ä–∏–º–µ—Ä: <em>31.12.2023 06.01.2024</em>",
                                  parse_mode="html")


@router_adm.message(isAdminFilter(config.admins), StateFilter(FSMAdmin.visitors_by_hand), F.text)
async def get_stats_by_hand(message: Message, bot: Bot):
    try:
        date_from, date_to = message.text.split()

        await bot.delete_message(
            chat_id=message.from_user.id,
            message_id=message.message_id,
        )

        await bot.delete_message(
            chat_id=message.chat.id,
            message_id=message.message_id - 1,
        )

        await report_visitors_in_range(date_from, date_to, message)
    except Exception as e:
        await message.bot.send_message(text=f"Get stats-visitors by hand error: {e}\n"
                                            f"User_id: {message.from_user.id}",
                                       chat_id=config.admins[0])
        await message.answer(text="‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï ‚ö†Ô∏è\n\n"
                                  "–í–æ–∑–Ω–∏–∫–ª–∞ <b>–æ—à–∏–±–∫–∞</b> –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö, "
                                  "–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É",
                             parse_mode="html")


@router_adm.message(isAdminFilter(config.admins), StateFilter(FSMAdmin.visitors_by_hand))
async def warning_get_stats_by_hand(message: Message):
    await message.answer(
        text="‚è≥–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç <b>—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª</b>\n\n"
             "–ù–∞–ø—Ä–∏–º–µ—Ä: <em>31.12.2023 06.01.2024</em>",
        parse_mode="html",
    )


@router_adm.callback_query(isAdminFilter(config.admins), StateFilter(FSMAdmin.stats), F.data == "money")
async def get_money_menu(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await state.set_state(FSMAdmin.money)
    await bot.delete_message(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id
    )
    await callback.message.answer(text="üíµ–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω",
                                  reply_markup=await create_admin_kb())


@router_adm.callback_query(isAdminFilter(config.admins), StateFilter(FSMAdmin.money), F.data == "last_week")
async def get_stats_week_money(callback: CallbackQuery, bot: Bot):
    try:
        date_to = datetime.now(tz=timezone(timedelta(hours=3.0)))
        date_from = date_to - timedelta(days=7)

        await callback.answer(text="‚è≥")

        await bot.delete_message(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id
        )

        time.sleep(0.5)

        await report_money_in_range(date_from.strftime("%d.%m.%Y"), date_to.strftime("%d.%m.%Y"), callback.message)
    except Exception as e:
        await callback.message.bot.send_message(text=f"Get stats-money last week error: {e}\n"
                                                     f"User_id: {callback.message.from_user.id}",
                                                chat_id=config.admins[0])
        await callback.message.answer(text="‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï ‚ö†Ô∏è\n\n"
                                           "–í–æ–∑–Ω–∏–∫–ª–∞ <b>–æ—à–∏–±–∫–∞</b> –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö, "
                                           "–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É",
                                      parse_mode="html")


@router_adm.callback_query(isAdminFilter(config.admins), StateFilter(FSMAdmin.money), F.data == "last_month")
async def get_stats_month_money(callback: CallbackQuery, bot: Bot):
    try:
        date_to = datetime.now(tz=timezone(timedelta(hours=3.0)))
        date_from = date_to - timedelta(days=30)

        await callback.answer(text="‚è≥")

        await bot.delete_message(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id
        )

        time.sleep(0.5)

        await report_money_in_range(date_from.strftime("%d.%m.%Y"), date_to.strftime("%d.%m.%Y"), callback.message)
    except Exception as e:
        await callback.message.bot.send_message(text=f"Get stats-money last month error: {e}\n"
                                                     f"User_id: {callback.message.from_user.id}",
                                                chat_id=config.admins[0])
        await callback.message.answer(text="‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï ‚ö†Ô∏è\n\n"
                                           "–í–æ–∑–Ω–∏–∫–ª–∞ <b>–æ—à–∏–±–∫–∞</b> –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö, "
                                           "–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É",
                                      parse_mode="html")


@router_adm.callback_query(isAdminFilter(config.admins), StateFilter(FSMAdmin.money), F.data == "last_year")
async def get_stats_year_money(callback: CallbackQuery, bot: Bot):
    try:
        date_to = datetime.now(tz=timezone(timedelta(hours=3.0)))
        date_from = date_to - timedelta(days=365)

        await callback.answer(text="‚è≥")

        await bot.delete_message(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id
        )

        time.sleep(0.5)

        await report_money_in_range(date_from.strftime("%d.%m.%Y"), date_to.strftime("%d.%m.%Y"), callback.message)
    except Exception as e:
        await callback.message.bot.send_message(text=f"Get stats-money last year error: {e}\n"
                                                     f"User_id: {callback.message.from_user.id}",
                                                chat_id=config.admins[0])
        await callback.message.answer(text="‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï ‚ö†Ô∏è\n\n"
                                           "–í–æ–∑–Ω–∏–∫–ª–∞ <b>–æ—à–∏–±–∫–∞</b> –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö, "
                                           "–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É",
                                      parse_mode="html")


@router_adm.callback_query(isAdminFilter(config.admins), StateFilter(FSMAdmin.money), F.data == "by_hand")
async def prepare_for_get_stats_money_by_hand(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await state.set_state(FSMAdmin.money_by_hand)
    await callback.answer(text="üëåüèª")
    await bot.delete_message(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
    )
    await callback.message.answer(text="‚è≥–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç <b>—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª</b>\n\n"
                                       "–ù–∞–ø—Ä–∏–º–µ—Ä: <em>31.12.2023 06.01.2024</em>",
                                  parse_mode="html")


@router_adm.message(isAdminFilter(config.admins), StateFilter(FSMAdmin.money_by_hand), F.text)
async def get_stats_by_hand(message: Message, bot: Bot):
    try:
        date_from, date_to = message.text.split()

        await bot.delete_message(
            chat_id=message.from_user.id,
            message_id=message.message_id,
        )

        await bot.delete_message(
            chat_id=message.chat.id,
            message_id=message.message_id - 1,
        )

        await report_money_in_range(date_from, date_to, message)
    except Exception as e:
        await message.bot.send_message(text=f"Get stats-money by hand error: {e}\n"
                                            f"User_id: {message.from_user.id}",
                                       chat_id=config.admins[0])
        await message.answer(text="‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï ‚ö†Ô∏è\n\n"
                                  "–í–æ–∑–Ω–∏–∫–ª–∞ <b>–æ—à–∏–±–∫–∞</b> –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö, "
                                  "–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É",
                             parse_mode="html")


@router_adm.message(isAdminFilter(config.admins), StateFilter(FSMAdmin.money_by_hand))
async def warning_get_stats_by_hand(message: Message):
    await message.answer(
        text="‚è≥–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç <b>—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª</b>\n\n"
             "–ù–∞–ø—Ä–∏–º–µ—Ä: <em>31.12.2023 06.01.2024</em>",
        parse_mode="html",
    )


@router_adm.callback_query(
    isAdminFilter(config.admins),
    StateFilter(FSMAdmin.visitors),
    F.data == "back"
)
async def adm_visitors_back_command(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await state.set_state(FSMAdmin.stats)
    await callback.answer(text="üëåüèª")
    await bot.delete_message(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
    )
    await callback.message.answer(text="‚è≥–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É",
                                  reply_markup=await create_money_or_visitors_kb())


@router_adm.callback_query(
    isAdminFilter(config.admins),
    StateFilter(FSMAdmin.money),
    F.data == "back"
)
async def adm_visitors_back_command(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await state.set_state(FSMAdmin.stats)
    await callback.answer(text="üëåüèª")
    await bot.delete_message(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
    )
    await callback.message.answer(text="‚è≥–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É",
                                  reply_markup=await create_money_or_visitors_kb())


@router_adm.callback_query(
    isAdminFilter(config.admins),
    F.data == "exit"
)
async def adm_cancel_command(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await callback.answer(text="üëã")
    await bot.delete_message(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
    )
    await callback.message.answer(text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await state.clear()